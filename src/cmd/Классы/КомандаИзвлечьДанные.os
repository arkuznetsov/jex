// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/jex/
// ----------------------------------------------------------

#Использовать "../../core"

Перем Лог;       // - Объект      - объект записи лога приложения

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("d data", "", "Строка JSON или путь к файлу с данными JSON")
	       .ТСтрока()
	       .Обязательный(Истина)
	       .ВОкружении("JEX_DATA_SOURCE");

	Команда.Опция("p path", "", "Строка запроса JSON-path для извлечения данных")
	       .ТСтрока()
	       .Обязательный(Истина)
	       .ВОкружении("JEX_DATA_PATH");

	Команда.Опция("e encoding", "", "Кодировка данных (по умолчанию: UTF-8)")
	       .ТСтрока()
	       .Обязательный(Истина)
	       .ВОкружении("JEX_DATA_ENCODING");

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ДанныеJSON     = Команда.ЗначениеОпции("data");
	СтрокаЗапроса  = Команда.ЗначениеОпции("path");
	Кодировка      = Команда.ЗначениеОпции("encoding");

	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "UTF-8";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеJSON) Тогда
		ДанныеJSON = Консоль.ОткрытьСтандартныйПотокВвода();
	КонецЕсли;

	Результат = ИзвлечениеДанныхJSON.Выбрать(ДанныеJSON, СтрокаЗапроса, Кодировка);

	Сообщить(Результат);

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыСистемы.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
